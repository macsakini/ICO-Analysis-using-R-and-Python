#Import dataset
library(readr)
data <- read_csv("data2.csv")
head(data)
#import libraries
library(tidyverse)
library(tidyr)
library(dplyr)
library(forecast)
library(broom)
library(ggplot2)
library(stargazer)
library(mltools)
library(data.table)
library(caret)
library(fitdistrplus)
library("Hmisc")
#Create new variables that will be used
#Log form of token number
#Count of categories
#Count of supported currecies
#Duration of ICO
data_x = data %>%
mutate(log_ratings = log(RATINGS))
#data_x = na.omit(data_x)
#data_x = data_x
head(data_x)
#Get unique variables and their count
cat("The platofrms used:", length(unique(data$GRIP)))
cat("\n")
cat("The total number of countries:", length(unique(data$ARM)))
cat("\n")
cat("The total number of token types is: ", length(unique(data$SIMS)))
#Getting Summary descriptive statistics of some key variables
summary(data)
#Getting Summary descriptive statistics of some key variables
summary(data_x)
#Fitting and plotting distributions on some variables using Maximum Likelihood Estimation (MLE)
# Log Normal distribution would be mostly targetted towards
descdistribution <- function(data){
x = na.omit(data)
x = x[!is.infinite((x))]
x <- x[x > 0]
desc = descdist(x, boot = 1000)
print(summary(desc))
}
descdistribution(data_x$logtokennumber)
#Fitting and plotting distributions on some variables using Maximum Likelihood Estimation (MLE)
# Log Normal distribution would be mostly targetted towards
descdistribution <- function(data){
x = na.omit(data)
x = x[!is.infinite((x))]
x <- x[x > 0]
desc = descdist(x, boot = 1000)
print(summary(desc))
}
descdistribution(data_x$ARM)
#Fitting and plotting distributions on some variables using Maximum Likelihood Estimation (MLE)
# Log Normal distribution would be mostly targetted towards
descdistribution <- function(data){
x = na.omit(data)
x = x[!is.infinite((x))]
x <- x[x > 0]
desc = descdist(x, boot = 1000)
print(summary(desc))
}
descdistribution(data_x$RATINGS)
#Fitting and plotting distributions on some variables using Maximum Likelihood Estimation (MLE)
# Log Normal distribution would be mostly targetted towards
descdistribution <- function(data){
x = na.omit(data)
x = x[!is.infinite((x))]
x <- x[x > 0]
desc = descdist(x, boot = 1000)
print(summary(desc))
}
descdistribution(data_x$SIMS)
#Fitting and plotting distributions on some variables using Maximum Likelihood Estimation (MLE)
# Log Normal distribution would be mostly targetted towards
descdistribution <- function(data){
x = na.omit(data)
x = x[!is.infinite((x))]
x <- x[x > 0]
desc = descdist(x, boot = 1000)
print(summary(desc))
}
descdistribution(data_x$GRIP)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
fitdistribution <- function(data){
x <- data[data > 0]
x = na.omit(x)
x = x[!is.infinite((x))]
fit <- fitdist(x, "logis")
print(summary(fit))
plot(fit)
}
fitdistribution(data_x$logtokennumber)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
fitdistribution <- function(data){
x <- data[data > 0]
x = na.omit(x)
x = x[!is.infinite((x))]
fit <- fitdist(x, "logis")
print(summary(fit))
plot(fit)
}
fitdistribution(data_x$GRIP)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
fitdistribution <- function(data){
x <- data[data > 0]
x = na.omit(x)
x = x[!is.infinite((x))]
fit <- fitdist(x, "logis")
print(summary(fit))
plot(fit)
}
fitdistribution(data_x$RATINGS)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
fitdistribution <- function(data){
x <- data[data > 0]
x = na.omit(x)
x = x[!is.infinite((x))]
fit <- fitdist(x, "logis")
print(summary(fit))
plot(fit)
}
fitdistribution(data_x$SIMS)
rand_x = na.omit(summarydata)
rand_x = na.omit(data_x)
rand_x = rand_x[!is.infinite(rowSums(rand_x)),]
# Basic density
ggplot(rand_x, aes(x = SIMS)) + geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(color="darkblue", fill="lightblue") + geom_vline(aes(xintercept=mean(SIMS)),
color="blue", linetype="dashed", size=1)
ggplot(rand_x, aes(x = GRIP)) +
geom_density(color="darkblue", fill="lightblue") + geom_vline(aes(mean(GRIP)),
color="blue", linetype="dashed", size=1)
ggplot(rand_x, aes(x = GRIP)) + geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(color="darkblue", fill="lightblue") + geom_vline(aes(xintercept=mean(GRIP)),
color="blue", linetype="dashed", size=1)
ggplot(rand_x, aes(x = ARM)) + geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(color="darkblue", fill="lightblue") + geom_vline(aes(xintercept=mean(ARM)),
color="blue", linetype="dashed", size=1)
ggplot(rand_x, aes(x = RATINGS)) + geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(color="darkblue", fill="lightblue") + geom_vline(aes(xintercept=mean(RATINGS)),
color="blue", linetype="dashed", size=1)
corr_matrix <- rcorr(as.matrix(rand_x))
corr_matrix
